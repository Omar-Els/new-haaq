import React, { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { FaExclamationTriangle, FaTimes, FaBroom, FaDatabase } from 'react-icons/fa';
import { StorageManager } from '../utils/storageManager';
import './StorageAlert.css';

const StorageAlert = () => {
  const [showAlert, setShowAlert] = useState(false);
  const [storageInfo, setStorageInfo] = useState(null);
  const [isCleaning, setIsCleaning] = useState(false);

  useEffect(() => {
    const checkStorage = () => {
      const info = StorageManager.getStorageInfo();
      setStorageInfo(info);
      
      if (info && info.usagePercentage > 85) {
        setShowAlert(true);
      } else {
        setShowAlert(false);
      }
    };

    // ูุญุต ููุฑู
    checkStorage();

    // ูุญุต ุฏูุฑู ูู 30 ุซุงููุฉ
    const interval = setInterval(checkStorage, 30000);

    return () => clearInterval(interval);
  }, []);

  const handleQuickClean = async () => {
    setIsCleaning(true);
    
    try {
      StorageManager.performEmergencyCleanup();
      
      // ุชุญุฏูุซ ูุนูููุงุช ุงูุชุฎุฒูู ุจุนุฏ ุงูุชูุธูู
      setTimeout(() => {
        const newInfo = StorageManager.getStorageInfo();
        setStorageInfo(newInfo);
        
        if (newInfo.usagePercentage < 85) {
          setShowAlert(false);
        }
        
        setIsCleaning(false);
      }, 2000);
    } catch (error) {
      console.error('ุฎุทุฃ ูู ุงูุชูุธูู ุงูุณุฑูุน:', error);
      setIsCleaning(false);
    }
  };

  const handleMigrateToIndexedDB = async () => {
    if (confirm(
      'ูู ุชุฑูุฏ ุชุฑุญูู ุฌููุน ุงูุจูุงูุงุช ุฅูู IndexedDB ุงูุขูุ\n\n' +
      'ุงููุฒุงูุง:\n' +
      'โข ูุณุงุญุฉ ุชุฎุฒูู ุฃูุจุฑ ุจูุซูุฑ (ุนุฏุฉ ุฌูุฌุงุจุงูุช)\n' +
      'โข ุฃุฏุงุก ุฃูุถู ูุน ุงูุจูุงูุงุช ุงููุจูุฑุฉ\n' +
      'โข ุฅุฏุงุฑุฉ ุฃูุถู ููุตูุฑ ูุงููููุงุช\n' +
      'โข ูุง ูุฒูุฏ ูู ูุดุงูู ุงูุชูุงุก ุงููุณุงุญุฉ\n\n' +
      'ุณูุชู ุงูุงุญุชูุงุธ ุจูุณุฎุฉ ุงุญุชูุงุทูุฉ ูู ุงูุจูุงูุงุช ุงูุญุงููุฉ.'
    )) {
      setIsCleaning(true);

      try {
        // ุงุณุชูุฑุงุฏ ุฃุฏูุงุช ุงูุชุฑุญูู
        const { migrateData } = await import('../utils/indexedDBManager');

        // ุชูููุฐ ุงูุชุฑุญูู
        const success = await migrateData();

        if (success) {
          alert('ุชู ุชุฑุญูู ุงูุจูุงูุงุช ุฅูู IndexedDB ุจูุฌุงุญ!\n\nุงูุขู ูุฏูู ูุณุงุญุฉ ุชุฎุฒูู ุฃูุจุฑ ุจูุซูุฑ.');

          // ุฅุฎูุงุก ุงูุชูุจูู
          setShowAlert(false);

          // ุฅุนุงุฏุฉ ุชุญููู ุงูุตูุญุฉ ูุชุทุจูู ุงูุชุบููุฑุงุช
          setTimeout(() => {
            window.location.reload();
          }, 1000);
        } else {
          alert('ูุดู ูู ุชุฑุญูู ุงูุจูุงูุงุช. ุชุญูู ูู ุฏุนู ุงููุชุตูุญ ูู IndexedDB.');
        }
      } catch (error) {
        console.error('ุฎุทุฃ ูู ุงูุชุฑุญูู:', error);
        alert('ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ุงูุชุฑุญูู: ' + error.message);
      } finally {
        setIsCleaning(false);
      }
    }
  };

  const handleDismiss = () => {
    setShowAlert(false);
    
    // ุฅุนุงุฏุฉ ุฅุธูุงุฑ ุงูุชูุจูู ุจุนุฏ 5 ุฏูุงุฆู ุฅุฐุง ูู ุชุญู ุงููุดููุฉ
    setTimeout(() => {
      const info = StorageManager.getStorageInfo();
      if (info && info.usagePercentage > 85) {
        setShowAlert(true);
      }
    }, 300000); // 5 ุฏูุงุฆู
  };

  return (
    <AnimatePresence>
      {showAlert && (
        <motion.div
          className="storage-alert-overlay"
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          exit={{ opacity: 0 }}
        >
          <motion.div
            className="storage-alert"
            initial={{ scale: 0.8, opacity: 0 }}
            animate={{ scale: 1, opacity: 1 }}
            exit={{ scale: 0.8, opacity: 0 }}
          >
            <div className="alert-header">
              <div className="alert-icon">
                <FaExclamationTriangle />
              </div>
              <h3>ุชุญุฐูุฑ: ูุณุงุญุฉ ุงูุชุฎุฒูู ููุชูุฆุฉ!</h3>
              <button 
                className="close-btn"
                onClick={handleDismiss}
                aria-label="ุฅุบูุงู ุงูุชูุจูู"
              >
                <FaTimes />
              </button>
            </div>

            <div className="alert-content">
              <div className="storage-info">
                <div className="usage-bar">
                  <div 
                    className="usage-fill"
                    style={{ 
                      width: `${storageInfo?.usagePercentage || 0}%`,
                      backgroundColor: storageInfo?.usagePercentage > 95 ? '#e74c3c' : 
                                     storageInfo?.usagePercentage > 85 ? '#f39c12' : '#2ecc71'
                    }}
                  />
                </div>
                <div className="usage-text">
                  <span>ุงููุณุงุญุฉ ุงููุณุชุฎุฏูุฉ: {storageInfo?.usedMB} MB ูู {storageInfo?.totalMB} MB</span>
                  <span className="percentage">({storageInfo?.usagePercentage}%)</span>
                </div>
              </div>

              <p className="alert-message">
                ูุณุงุญุฉ ุงูุชุฎุฒูู ุงููุญูู ููุชูุฆุฉ ุชูุฑูุจุงู. ูุฐุง ูุฏ ูุคุซุฑ ุนูู ุฃุฏุงุก ุงูุชุทุจูู ููุฏุฑุชู ุนูู ุญูุธ ุจูุงูุงุช ุฌุฏูุฏุฉ.
              </p>

              <div className="alert-actions">
                <motion.button
                  className="action-btn quick-clean-btn"
                  onClick={handleQuickClean}
                  disabled={isCleaning}
                  whileHover={{ scale: 1.05 }}
                  whileTap={{ scale: 0.95 }}
                >
                  <FaBroom />
                  {isCleaning ? 'ุฌุงุฑู ุงูุชูุธูู...' : 'ุชูุธูู ุณุฑูุน'}
                </motion.button>

                <motion.button
                  className="action-btn migrate-btn"
                  onClick={handleMigrateToIndexedDB}
                  whileHover={{ scale: 1.05 }}
                  whileTap={{ scale: 0.95 }}
                >
                  <FaDatabase />
                  ุชุฑุญูู ุฅูู IndexedDB
                </motion.button>
              </div>

              <div className="alert-benefits">
                <h4>๐ก ููุงุฆุฏ ุงูุชุฑุญูู ุฅูู IndexedDB:</h4>
                <ul>
                  <li>โ ูุณุงุญุฉ ุชุฎุฒูู ุฃูุจุฑ (ุนุฏุฉ ุฌูุฌุงุจุงูุช)</li>
                  <li>โ ุฃุฏุงุก ุฃูุถู ูุน ุงูุจูุงูุงุช ุงููุจูุฑุฉ</li>
                  <li>โ ุฅุฏุงุฑุฉ ุฃูุถู ููุตูุฑ ูุงููููุงุช</li>
                  <li>โ ูุง ูุฒูุฏ ูู ูุดุงูู ุงูุชูุงุก ุงููุณุงุญุฉ</li>
                </ul>
              </div>
            </div>
          </motion.div>
        </motion.div>
      )}
    </AnimatePresence>
  );
};

export default StorageAlert;
